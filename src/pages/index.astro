<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Oriol Giner Díaz</title>
		<style>
			body {
				margin: 0;
			}
			#container {
				width: 100vw;
				height: 100vh;
			}
			canvas {
				width: 100%;
				height: 100%;
			}
		</style>
	</head>
	<body>
		<div id="container"></div>


		<script>
			import * as THREE from "three";
			import { Water } from "three/addons/objects/Water.js";
			import { Sky } from "three/addons/objects/Sky.js";

			let container;
			let camera, scene, renderer;
			let water, sun;

			init();

			function init() {
				container = document.getElementById("container");

				// Renderizador
				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio(window.devicePixelRatio);
				renderer.setSize(window.innerWidth, window.innerHeight);
				renderer.toneMapping = THREE.ACESFilmicToneMapping;
				renderer.toneMappingExposure = 0.5;
				container.appendChild(renderer.domElement);

				// Escena
				scene = new THREE.Scene();

				// Cámara
				camera = new THREE.PerspectiveCamera(
					55,
					window.innerWidth / window.innerHeight,
					1,
					20000,
				);
				camera.position.set(0, 100, 0); // Vista desde arriba
				camera.lookAt(0, 0, 0);

				// Sol
				sun = new THREE.Vector3();

				// Agua
				const waterGeometry = new THREE.PlaneGeometry(10000, 10000);
				water = new Water(waterGeometry, {
					textureWidth: 512,
					textureHeight: 512,
					waterNormals: new THREE.TextureLoader().load(
						"http://localhost:4321/waternormals.jpg",
						function (texture) {
							texture.wrapS = texture.wrapT =
								THREE.RepeatWrapping;
						},
					),
					sunDirection: new THREE.Vector3(),
					sunColor: 0xffffff,
					waterColor: 0x001e0f,
					distortionScale: 3.7,
					fog: scene.fog !== undefined,
				});
				water.rotation.x = -Math.PI / 2;
				scene.add(water);

				// Cielo
				const sky = new Sky();
				sky.scale.setScalar(10000);
				scene.add(sky);

				const skyUniforms = sky.material.uniforms;
				skyUniforms["turbidity"].value = 10;
				skyUniforms["rayleigh"].value = 2;
				skyUniforms["mieCoefficient"].value = 0.005;
				skyUniforms["mieDirectionalG"].value = 0.8;

				// Configuración del sol
				const parameters = {
					elevation: 20,
					azimuth: 180,
				};

				const phi = THREE.MathUtils.degToRad(90 - parameters.elevation);
				const theta = THREE.MathUtils.degToRad(parameters.azimuth);
				sun.setFromSphericalCoords(1, phi, theta);
				sky.material.uniforms["sunPosition"].value.copy(sun);
				water.material.uniforms["sunDirection"].value
					.copy(sun)
					.normalize();

				// Generador de entorno
				const pmremGenerator = new THREE.PMREMGenerator(renderer);
				const sceneEnv = new THREE.Scene();
				sceneEnv.add(sky);
				const renderTarget = pmremGenerator.fromScene(sceneEnv);
				scene.add(sky);
				scene.environment = renderTarget.texture;

				// Evento de cambio de tamaño
				window.addEventListener("resize", onWindowResize);

				// Iniciar animación
				animate();
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize(window.innerWidth, window.innerHeight);
			}

			function animate() {
				requestAnimationFrame(animate);
				render();
			}

			function render() {
				const time = performance.now() * 0.001;
				water.material.uniforms["time"].value += 1.0 / 60.0;
				renderer.render(scene, camera);
			}
		</script>
	</body>
</html>
